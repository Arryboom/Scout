#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
* @ Scout for Python
##############################################################################
# Author: YWJT / ZhiQiang Koo                                                #
# Modify: 2019-11-06                                                         #
##############################################################################
# This program is distributed under the "Artistic License" Agreement         #
# The LICENSE file is located in the same directory as this program. Please  #
# read the LICENSE file before you make copies or distribute this program    #
##############################################################################
"""

import sys
sys.path.append("..")
import os, time, atexit, datetime
import commands
import shutil
import platform
from signal import SIGTERM
from lib import Dshield, Loger
from lib import CONF_DIR, LOGS_DIR, CACHE_DIR
from lib.util import Scout
from lib.dstat import Dstat
PROC_DIR =  os.path.abspath('.')


class Daemon:
	"""
	daemon class.	
	Usage: subclass the Daemon class and override the _run() method
	"""
	def __init__(self, pidfile='/tmp/daemon.pid', stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
		self.stdin = stdin
		self.stdout = stdout
		self.stderr = stderr
		self.pidfile = LOGS_DIR + pidfile
	
	def _daemonize(self):
		#脱离父进程
		try: 
			pid = os.fork() 
			if pid > 0:
				sys.exit(0) 
		except OSError as e: 
			sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
			Loger().ERROR("Scoutd fork #1 failed:"+str(e.strerror))
			sys.exit(1)
		os.setsid() 
		os.chdir(PROC_DIR) 
		os.umask(0)
	
		#第二次fork，禁止进程重新打开控制终端
		try: 
			pid = os.fork() 
			if pid > 0:
				sys.exit(0) 
		except OSError as e: 
			sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
			Loger().ERROR("Scoutd fork #2 failed:"+str(e.strerror))
			sys.exit(1) 

		sys.stdout.flush()
		sys.stderr.flush()
		si = file(self.stdin, 'r')
		so = file(self.stdout, 'a+')
		se = file(self.stderr, 'a+', 0) 
		os.dup2(si.fileno(), sys.stdin.fileno())
		os.dup2(so.fileno(), sys.stdout.fileno())
		os.dup2(se.fileno(), sys.stderr.fileno())
		atexit.register(self.delpid)
		pid = str(os.getpid())
		file(self.pidfile,'w+').write("%s\n" % pid)
	
	def delpid(self):
		os.remove(self.pidfile)

	def start(self):
		"""
		Start the daemon
		"""
		try:
			pf = file(self.pidfile,'r')
			pid = int(pf.read().strip())
			pf.close()
		except IOError as e:
			pid = None
	
		if pid:
			message = "Start error,pidfile %s already exist. Scoutd already running?\n"
			Loger().ERROR(message)
			sys.stderr.write(message % self.pidfile)
			sys.exit(1)

		self._daemonize()
		self._run()

	def stop(self):
		"""
		Stop the daemon
		"""
		try:
			pf = file(self.pidfile,'r')
			pid = int(pf.read().strip())
			pf.close()
		except IOError as e:
			pid = None
	
		if not pid:
			message = "pidfile %s does not exist. Scoutd not running?\n"
			Loger().ERROR(message)
			sys.stderr.write(message % self.pidfile)
			return

		try:
			while 1:
				os.kill(pid, SIGTERM)
				time.sleep(0.1)
		except OSError as err:
			err = str(err)
			if err.find("No such process") > 0:
				if os.path.exists(self.pidfile):
					os.remove(self.pidfile)
					Loger().WARNING("stop Scoutd Success.")
			else:
				Loger().ERROR("stop error,"+str(err))
				sys.exit(1)

	def restart(self):
		self.stop()
		self.start()


def cacheserver_running_alive():
	cache = os.popen('ps -fe|grep "cacheServer"|grep -v "grep"|wc -l').read().strip()
	if (cache == '0'):
		return None
	else:
		return True


class Scoutd(Daemon):
	def status(self):
		try:
			pf = file(self.pidfile, 'r')
			pid = int(pf.read().strip())
			pf.close()
			Scout().status(pid)
		except IOError as e:
			message = "No such a process running.\n"
			sys.stderr.write(message)


	def _run(self):
		if cacheserver_running_alive():
			Loger().WARNING('Scoutd %s ' % Dshield().avr['version'])
			Loger().WARNING('Copyright (C) 2011-2019, YWJT.org.')
			Loger().WARNING('Scoutd started with pid %d' % os.getpid())
			Loger().WARNING('Scoutd started with %s' % datetime.datetime.now().strftime("%m/%d/%Y %H:%M"))
			Scout().run()
		else:
			Loger().ERROR('CacheServer not running... you must be start it first!')
			raise



class CacheServerd(Dshield):
	def __init__(self):
		Dshield.__init__(self)
		__dbPath = '%s/.Scoutd/Bolt' % CACHE_DIR
		__logPath = '%s/cacheserver.log' % LOGS_DIR
		__storagePort = 6666
		__storageSize = self.avr['storage_size']
		if self.avr['storage_type'] in ['Memory','Disk']:
			if self.avr['storage_type']=='Memory':
				self.__CacheRunCommand = 'cacheServer \
										--port=%d \
										--dbpath=%s \
										--storageEngine=inMemory \
										--inMemorySizeGB=%d \
										--logpath=%s \
										--logappend \
										--fork \
										--quiet' % (__storagePort, __dbPath, __storageSize, __logPath)
			else:
				self.__CacheRunCommand = 'cacheServer \
										--port=%d \
										--dbpath=%s \
										--storageEngine=wiredTiger \
										--wiredTigerCacheSizeGB=%d \
										--logpath=%s \
										--logappend \
										--fork \
										--quiet' % (__storagePort, __dbPath, __storageSize, __logPath)
			self.__CacheStopCommand = 'cacheServer --dbpath=%s --shutdown' % __dbPath
		else:
			Loger().CRITICAL("'storage_type' value not match! options: 'Memory' or 'Disk'")
			raise

	def start(self):
		try:
			if not cacheserver_running_alive():
				os.chdir(PROC_DIR)
				status, output = commands.getstatusoutput(self.__CacheRunCommand)
				if status==0:
					Loger().WARNING('CacheServer started with pid {}\n'.format(os.getpid()))
					time.sleep(2)
				else:
					sys.stdout.write('CacheServer started failed. \n')
			else:	
				Loger().WARNING('CacheServer Daemon Alive!')
		except Exception as e:
			sys.stdout.write(str(e)+'\n')
			pass

	def stop(self):
		try:
			if cacheserver_running_alive():
				os.chdir(PROC_DIR)
				status, output = commands.getstatusoutput(self.__CacheStopCommand)
				if status==0:
					Loger().WARNING('CacheServer stop Success. {}\n'.format(time.ctime()))
					time.sleep(2)
		except Exception as e:
			pass

	def restart(self):
		self.stop()
		self.start()


class Tailf(Dshield):
	def __init__(self):
		Dshield.__init__(self)
		__logfilename = LOGS_DIR + self.avr['log_file']
		self.check_file_validity(__logfilename)
		self.tailed_file = __logfilename
		self.callback = sys.stdout.write
 
	def follow(self, s=1):
		print("logging output ......")
		with open(self.tailed_file) as file_:
			file_.seek(0, 2)
			while True:
				curr_position = file_.tell()
				line = file_.readline()
				if not line:
					file_.seek(curr_position)
				else:
					self.callback(line)
				time.sleep(s)
 
	def register_callback(self, func):
		self.callback = func
 
	def check_file_validity(self, file_):
		if not os.access(file_, os.F_OK):
			raise TailError("File '%s' does not exist" % (file_))
		if not os.access(file_, os.R_OK):
			raise TailError("File '%s' not readable" % (file_))
		if os.path.isdir(file_):
			raise TailError("File '%s' is a directory" % (file_))
 
class TailError(Exception):
	def __init__(self, msg):
		self.message = msg
	def __str__(self):
		return self.message

def initCache():
	__dbPath = '%s/.Scoutd/Bolt' % CACHE_DIR
	if os.path.exists(__dbPath):
		shutil.rmtree(__dbPath)
	os.system('mkdir -p %s' % __dbPath)
	os.chmod(__dbPath, 777)



def help():
	__MAN = 'Usage: %s \n \
		          \n \
Options:  \n \
	init       creating and initializing a new cache partition. \n \
	start      start all service. \n \
	stop       stop main proccess, cacheserver keep running. \n \
	restart    restart main proccess, cacheserver keep running. \n \
	reload     same as restart. \n \
	forcestop  stop all service, include cacheserver and main proccess. \n \
	reservice  restart cacheserver and main proccess. \n \
	status     show main proccess run infomation. \n \
	dstat      show generating system resource statistics. \n \
	view       check block/unblock infomation. \n \
	watch      same as tailf, watching log output. \n \
	help       show this usage information. \n \
	version    show version information. \n \
	'
	print(__MAN % sys.argv[0])


if __name__ == '__main__':
	daemon = Scoutd(pidfile='scoutd.pid')
	cached = CacheServerd()

	if len(sys.argv) > 1:
		if 'START' == (sys.argv[1]).upper():
			cached.start()
			daemon.start()
		elif 'STOP' == (sys.argv[1]).upper():
			daemon.stop()
		elif 'FORCESTOP' == (sys.argv[1]).upper():
			daemon.stop()
			cached.stop()
		elif 'RESERVICE' == (sys.argv[1]).upper():
			print("Are you sure force restart Scoutd service?\n \
  When the cacheServer is restarted, \n \
    * If you set storage_type = 'Memory', the data records will be cleared.\n \
    * If you set storage_type = 'Disk', the data records not be cleared.")
			if raw_input("Enter ('yes|y|Y'):") in ['yes', 'Y', 'y']:
				cached.restart()
				daemon.restart()
		elif 'RESTART' == sys.argv[1].upper():
			daemon.restart()
		elif 'RELOAD' == sys.argv[1].upper():
			daemon.restart()
		elif 'STATUS' == (sys.argv[1]).upper():
			daemon.status()
		elif 'HELP' == (sys.argv[1]).upper():
			help()
		elif 'WATCH' == (sys.argv[1]).upper():
			Tailf().follow()
		elif 'VERSION' == (sys.argv[1]).upper():
			print(Dshield().avr['version'])
		elif 'VIEW' == (sys.argv[1]).upper():
			Scout().view()
		elif 'INIT' == (sys.argv[1]).upper():
			print("Are you sure initialize Scoutd service?\n When the cache data will be cleared.")
			if raw_input("Enter ('yes|y|Y'):") in ['yes', 'Y', 'y']:
				cached.stop()
				initCache()
				cached.start()
		elif 'DSTAT' == (sys.argv[1]).upper():
			Scout().dstat()
		else:
			print "Unknow Command!"
			help()
			sys.exit(1)
	else:
		cached.start()
		Scout().run()
